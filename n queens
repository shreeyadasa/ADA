bool isSafe(int board[N][N], int row, int col)
{
	int i, j;

	/* Check this row on left side */
	for (i = 0; i < col; i++)
		if (board[row][i])
			return false;

	/* Check upper diagonal on left side */
	for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
		if (board[i][j])
			return false;

	/* Check lower diagonal on left side */
	for (i = row, j = col; j >= 0 && i < N; i++, j--)
		if (board[i][j])
			return false;

	return true;
}

#include<stdio.h>
#include<string.h>
int N;
int issafe(char a[][N],int r,int c)
{
    int i,j;
    for(i=0;i<r;i++)
    {
        if(a[i][c] == 'Q')
        {
            return 0;
        }
    }
    for(i=r,j=c;i>=0 && j>=0;i--,j--)
    {
        if(a[i][j] == 'Q')
        {
            return 0;
        }
    }
    for(i=r,j=c;i>=0 && j<N;i--,j++)
    {
        if(a[i][j] == 'Q')
        {
            return 0;
        }
    }
    return 1;
}
void print(char a[][N])
{
    int i,j;
    for(i=0;i<N;i++)
    {
        for(j=0;j<N;j++)
        {
            printf("%c ",a[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}
int nqueen(char a[][N],int r)
{
    int i;
    if(r == N)
    {
        print(a);
    }
    for(i=0;i<N;i++)
    {
        if(issafe(a,r,i)==1)
        {
            a[r][i] = 'Q';
            nqueen(a,r+1);
            a[r][i] = '-';
        }
    }
}
void main()
{
    printf("Enter the number of queens: \n");
    scanf("%d",&N);
    char a[N][N];
    memset(a,'-',sizeof a);
    nqueen(a,0);
   
}
